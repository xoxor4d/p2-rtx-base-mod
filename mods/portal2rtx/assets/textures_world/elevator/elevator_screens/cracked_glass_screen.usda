#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50000, 0, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500, 500, 500)
                double3 target = (-0.000003978039160301705, -0.0000039780389897714485, 0.000007956076558457426)
            }
            dictionary Right = {
                double3 position = (0, -50000, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "ReferenceTarget"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "ReferenceTarget" (
    kind = "group"
)
{
    float3 xformOp:rotateXYZ = (0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    def Xform "XForms" (
        kind = "group"
    )
    {
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Xform "World" (
            kind = "component"
        )
        {
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def Scope "Looks"
            {
                def Material "mat_backside"
                {
                    token outputs:mdl:displacement.connect = </ReferenceTarget/XForms/World/Looks/mat_backside/Shader.outputs:out>
                    token outputs:mdl:surface.connect = </ReferenceTarget/XForms/World/Looks/mat_backside/Shader.outputs:out>
                    token outputs:mdl:volume.connect = </ReferenceTarget/XForms/World/Looks/mat_backside/Shader.outputs:out>

                    def Shader "Shader"
                    {
                        uniform token info:implementationSource = "sourceAsset"
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Opacity.mdl@
                        uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                        color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
                        asset inputs:diffuse_texture = @./0EDF1D4F6715CD60_albedo.a.rtex.dds@
                        color3f inputs:emissive_color_constant = (1, 1, 1)
                        float inputs:emissive_intensity = 1
                        bool inputs:enable_emission = 0
                        int inputs:encoding = 2
                        custom asset inputs:normalmap_texture = @./elevator_screen_broken1_normal_OTH_Normal.n.rtex.dds@
                        float inputs:opacity_constant = 1
                        token outputs:out (
                            renderType = "material"
                        )
                    }
                }

                def Material "mat_glass"
                {
                    token outputs:mdl:displacement.connect = </ReferenceTarget/XForms/World/Looks/mat_glass/Shader.outputs:out>
                    token outputs:mdl:surface.connect = </ReferenceTarget/XForms/World/Looks/mat_glass/Shader.outputs:out>
                    token outputs:mdl:volume.connect = </ReferenceTarget/XForms/World/Looks/mat_glass/Shader.outputs:out>

                    def Shader "Shader"
                    {
                        uniform token info:implementationSource = "sourceAsset"
                        uniform asset info:mdl:sourceAsset = @AperturePBR_Translucent.mdl@
                        uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                        custom asset inputs:normalmap_texture = @./elevator_screen_broken1_normal_OTH_Normal.n.rtex.dds@
                        token outputs:out (
                            renderType = "material"
                        )
                    }
                }
            }

            def Xform "broken_glass_elevator"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                float3 xformOp:scale = (100, 100, 100)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "backside"
                {
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Mesh "backside" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        float3[] extent = [(-7.9854774, -29.62579, -65.14287), (8.1441, 31.874685, 62.857136)]
                        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4]
                        int[] faceVertexIndices = [2, 10, 5, 8, 13, 0, 8, 4, 5, 14, 1, 8, 8, 6, 15, 2, 7, 12, 3, 8, 3, 11, 6, 8, 0, 16, 7, 8, 9, 4, 8, 1]
                        rel material:binding = </ReferenceTarget/XForms/World/Looks/mat_backside>
                        normal3f[] normals = [(-0.9672731, 0.25373742, 0.000002111816), (-0.96727216, 0.25374094, 0.0000039256415), (-0.9672722, 0.25374097, 0.000003924416), (-0.97276574, 0.2233191, 0.062091086), (-0.9580882, 0.25123683, -0.13764817), (-0.92313594, 0.38447374, -0.00012626396), (-0.97276574, 0.2233191, 0.062091086), (-0.9580935, 0.2512383, -0.13760835), (-0.9672722, 0.25374097, 0.000003924416), (-0.96727216, 0.25374097, 0.00000392319), (-0.92316556, 0.38440245, 0.0000038749245), (-0.97276574, 0.2233191, 0.062091086), (-0.97276574, 0.2233191, 0.062091086), (-0.9672753, 0.25372893, -0.000029623772), (-0.9672754, 0.25372893, -0.0000022562663), (-0.9672731, 0.25373742, 0.000002111816), (-0.9231216, 0.38450813, -0.00014909537), (-0.92306125, 0.3846531, -0.00014913059), (-0.9672416, 0.25385746, -0.00012310689), (-0.97276574, 0.2233191, 0.062091086), (-0.9672416, 0.25385746, -0.00012310689), (-0.9672753, 0.25372893, -0.000056987676), (-0.9672753, 0.25372893, -0.000029623772), (-0.97276574, 0.2233191, 0.062091086), (-0.92313594, 0.38447374, -0.00012626396), (-0.92315257, 0.38443387, -0.00014905175), (-0.9231216, 0.38450813, -0.00014909537), (-0.97276574, 0.2233191, 0.062091086), (-0.95807683, 0.25132158, -0.13757293), (-0.9580935, 0.2512383, -0.13760835), (-0.97276574, 0.2233191, 0.062091086), (-0.92316556, 0.38440245, 0.0000038749245)] (
                            interpolation = "faceVarying"
                        )
                        point3f[] points = [(-7.9842567, -29.603947, 62.857136), (-7.9854774, -29.62579, -65.14287), (8.1441, 31.8609, -65.14287), (8.143795, 31.874685, 62.857136), (-7.9844093, -29.622707, -1.1428642), (0.07931149, 1.117553, -65.14287), (8.143703, 31.859955, -1.1428642), (0.07429135, 1.1353638, 62.857136), (0.080379605, 1.1206353, -1.1428642), (-7.9849434, -29.624249, -33.142864), (4.111706, 16.489227, -65.14287), (8.143749, 31.867321, 30.857136), (4.1090355, 16.505024, 62.857136), (-7.984333, -29.61333, 30.857136), (-3.953083, -14.254117, -65.14287), (8.143902, 31.860428, -33.142864), (-3.9549904, -14.234292, 62.857136)]
                        texCoord2f[] primvars:st = [(0.2499876, 1), (0.50000477, 1), (0.75002193, 1), (1.0000391, 1), (-0.000029563904, 1), (1.0000141, 1.25), (-0.00002169609, 1.25), (0.4999547, 1.5), (0.99998903, 1.5), (-0.000013828278, 1.5), (0.999964, 1.75), (-0.0000059604645, 1.75), (0.0000019073486, 2), (0.24998617, 2), (0.49997044, 2), (0.7499547, 2), (0.99993896, 2)] (
                            interpolation = "faceVarying"
                        )
                        int[] primvars:st:indices = [4, 0, 1, 7, 10, 16, 7, 8, 1, 2, 3, 7, 7, 9, 6, 4, 14, 13, 12, 7, 12, 11, 9, 7, 16, 15, 14, 7, 5, 8, 7, 3]
                        uniform token subdivisionScheme = "none"
                    }
                }

                def Xform "glass_front"
                {
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Mesh "glass_front" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        float3[] extent = [(-7.9854774, -29.62579, -65.14287), (8.1441, 31.874685, 62.857136)]
                        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
                        int[] faceVertexIndices = [0, 18, 15, 2, 11, 10, 5, 19, 15, 6, 16, 20, 5, 21, 10, 8, 13, 22, 1, 9, 23, 3, 12, 24, 24, 21, 5, 24, 12, 21, 12, 7, 21, 23, 19, 5, 23, 9, 19, 9, 4, 19, 22, 24, 5, 22, 13, 24, 13, 3, 24, 10, 17, 2, 10, 21, 17, 21, 7, 17, 20, 23, 5, 20, 16, 23, 16, 1, 23, 15, 14, 0, 15, 19, 14, 19, 4, 14, 10, 20, 5, 10, 11, 20, 11, 6, 20, 15, 22, 5, 15, 18, 22, 18, 8, 22]
                        rel material:binding = </ReferenceTarget/XForms/World/Looks/mat_glass>
                        normal3f[] normals = [(-0.92657095, 0.37564564, 0.018879829), (-0.9214176, 0.3878556, 0.023613716), (-0.97714126, 0.1843203, 0.1059296), (-0.96466666, 0.26321277, -0.011708346), (-0.9668261, 0.25484258, -0.017393641), (-0.97113144, 0.23767667, -0.020339157), (-0.9831496, 0.18279569, 0.0015709596), (-0.9678142, 0.22941095, -0.10347127), (-0.97714126, 0.1843203, 0.1059296), (-0.9671346, 0.25371537, -0.016714152), (-0.96713454, 0.25371537, -0.016714133), (-0.9764744, 0.21500987, -0.016387254), (-0.9831496, 0.18279569, 0.0015709596), (-0.969485, 0.24490258, 0.011031217), (-0.97113144, 0.23767667, -0.020339157), (-0.9228488, 0.38443714, 0.02362645), (-0.9227886, 0.38458163, 0.023624685), (-0.9599416, 0.2524777, 0.121520706), (-0.9266259, 0.37579897, -0.011811293), (-0.9665636, 0.21402213, -0.14124186), (-0.95823586, 0.27141953, 0.09008446), (-0.9645229, 0.26332083, 0.018915467), (-0.95361227, 0.30100387, 0.0045000943), (-0.95564705, 0.29121512, 0.043959413), (-0.95564705, 0.29121512, 0.043959413), (-0.969485, 0.24490258, 0.011031217), (-0.9831496, 0.18279569, 0.0015709596), (-0.95564705, 0.29121512, 0.043959413), (-0.95361227, 0.30100387, 0.0045000943), (-0.969485, 0.24490258, 0.011031217), (-0.95361227, 0.30100387, 0.0045000943), (-0.95832646, 0.28565234, 0.003610761), (-0.969485, 0.24490258, 0.011031217), (-0.95823586, 0.27141953, 0.09008446), (-0.9678142, 0.22941095, -0.10347127), (-0.9831496, 0.18279569, 0.0015709596), (-0.95823586, 0.27141953, 0.09008446), (-0.9665636, 0.21402213, -0.14124186), (-0.9678142, 0.22941095, -0.10347127), (-0.9665636, 0.21402213, -0.14124186), (-0.96656066, 0.21848603, -0.13425426), (-0.9678142, 0.22941095, -0.10347127), (-0.9599416, 0.2524777, 0.121520706), (-0.95564705, 0.29121512, 0.043959413), (-0.9831496, 0.18279569, 0.0015709596), (-0.9599416, 0.2524777, 0.121520706), (-0.9227886, 0.38458163, 0.023624685), (-0.95564705, 0.29121512, 0.043959413), (-0.9227886, 0.38458163, 0.023624685), (-0.9645229, 0.26332083, 0.018915467), (-0.95564705, 0.29121512, 0.043959413), (-0.97113144, 0.23767667, -0.020339157), (-0.95832634, 0.2856521, 0.0036438454), (-0.96466666, 0.26321277, -0.011708346), (-0.97113144, 0.23767667, -0.020339157), (-0.969485, 0.24490258, 0.011031217), (-0.95832634, 0.2856521, 0.0036438454), (-0.969485, 0.24490258, 0.011031217), (-0.95832646, 0.28565234, 0.003610761), (-0.95832634, 0.2856521, 0.0036438454), (-0.9764744, 0.21500987, -0.016387254), (-0.95823586, 0.27141953, 0.09008446), (-0.9831496, 0.18279569, 0.0015709596), (-0.9764744, 0.21500987, -0.016387254), (-0.96713454, 0.25371537, -0.016714133), (-0.95823586, 0.27141953, 0.09008446), (-0.96713454, 0.25371537, -0.016714133), (-0.9266259, 0.37579897, -0.011811293), (-0.95823586, 0.27141953, 0.09008446), (-0.97714126, 0.1843203, 0.1059296), (-0.96655625, 0.2184852, -0.13428804), (-0.92657095, 0.37564564, 0.018879829), (-0.97714126, 0.1843203, 0.1059296), (-0.9678142, 0.22941095, -0.10347127), (-0.96655625, 0.2184852, -0.13428804), (-0.9678142, 0.22941095, -0.10347127), (-0.96656066, 0.21848603, -0.13425426), (-0.96655625, 0.2184852, -0.13428804), (-0.97113144, 0.23767667, -0.020339157), (-0.9764744, 0.21500987, -0.016387254), (-0.9831496, 0.18279569, 0.0015709596), (-0.97113144, 0.23767667, -0.020339157), (-0.9668261, 0.25484258, -0.017393641), (-0.9764744, 0.21500987, -0.016387254), (-0.9668261, 0.25484258, -0.017393641), (-0.9671346, 0.25371537, -0.016714152), (-0.9764744, 0.21500987, -0.016387254), (-0.97714126, 0.1843203, 0.1059296), (-0.9599416, 0.2524777, 0.121520706), (-0.9831496, 0.18279569, 0.0015709596), (-0.97714126, 0.1843203, 0.1059296), (-0.9214176, 0.3878556, 0.023613716), (-0.9599416, 0.2524777, 0.121520706), (-0.9214176, 0.3878556, 0.023613716), (-0.9228488, 0.38443714, 0.02362645), (-0.9599416, 0.2524777, 0.121520706)] (
                            interpolation = "faceVarying"
                        )
                        point3f[] points = [(-7.9842567, -29.603947, 62.857136), (-7.9854774, -29.62579, -65.14287), (8.1441, 31.8609, -65.14287), (8.143795, 31.874685, 62.857136), (-7.9844093, -29.622707, -1.1428642), (-1.0148505, 1.1519883, -1.1428642), (0.07931149, 1.117553, -65.14287), (8.143703, 31.859955, -1.1428642), (0.07429135, 1.1353638, 62.857136), (-7.9849434, -29.624249, -33.142864), (3.322033, 16.506445, -33.142864), (4.111706, 16.489227, -65.14287), (8.143749, 31.867321, 30.857136), (4.1090355, 16.505024, 62.857136), (-7.984333, -29.61333, 30.857136), (-4.7421455, -14.22598, 30.857136), (-3.953083, -14.254117, -65.14287), (8.143902, 31.860428, -33.142864), (-3.9549904, -14.234292, 62.857136), (-4.742222, -14.23536, -1.1428642), (-0.71036136, 1.1347687, -33.142864), (3.3218346, 16.505972, -1.1428642), (-0.71287906, 1.143676, 30.857136), (-4.742756, -14.236901, -33.142864), (3.3218803, 16.513338, 30.857136)]
                        texCoord2f[] primvars:st = [(0.2499876, 1), (0.50000477, 1), (0.75002193, 1), (1.0000391, 1), (-0.000029563904, 1), (0.24996257, 1.25), (0.49997973, 1.25), (0.7499969, 1.25), (1.0000141, 1.25), (-0.00002169609, 1.25), (0.24997044, 1.5), (0.4999547, 1.5), (0.74997187, 1.5), (0.99998903, 1.5), (-0.000013828278, 1.5), (0.2499783, 1.75), (0.49996257, 1.75), (0.74994683, 1.75), (0.999964, 1.75), (-0.0000059604645, 1.75), (0.0000019073486, 2), (0.24998617, 2), (0.49997044, 2), (0.7499547, 2), (0.99993896, 2)] (
                            interpolation = "faceVarying"
                        )
                        int[] primvars:st:indices = [24, 23, 17, 4, 0, 5, 11, 12, 17, 1, 2, 6, 11, 10, 5, 22, 21, 16, 3, 8, 7, 20, 19, 15, 15, 10, 11, 15, 19, 10, 19, 14, 10, 7, 12, 11, 7, 8, 12, 8, 13, 12, 16, 15, 11, 16, 21, 15, 21, 20, 15, 5, 9, 4, 5, 10, 9, 10, 14, 9, 6, 7, 11, 6, 2, 7, 2, 3, 7, 17, 18, 24, 17, 12, 18, 12, 13, 18, 5, 6, 11, 5, 0, 6, 0, 1, 6, 17, 16, 11, 17, 23, 16, 23, 22, 16]
                        uniform token subdivisionScheme = "none"
                    }
                }
            }

            def SkelRoot "broken_glass_elevator_skel"
            {
                def Skeleton "Skeleton"
                {
                    uniform matrix4d[] bindTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )]
                    uniform token[] joints = ["broken_glass_elevator"]
                    uniform matrix4d[] restTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )]
                }
            }
        }
    }
}

