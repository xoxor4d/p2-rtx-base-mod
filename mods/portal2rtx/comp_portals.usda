#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "Looks"
    {
        token visibility = "invisible"

        def Material "mat_2DD4622187E81CE7" (
            references = None
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_2DD4622187E81CE7/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_2DD4622187E81CE7/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_2DD4622187E81CE7/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Portal.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Portal"
                float inputs:emissive_intensity = 0.25 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./assets/textures_effects/portal/Portal1024Orange_03.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:portal_index = 0 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                    }
                    displayName = "Portal Index"
                    doc = """Which portal this represents
This parameter is unused."""
                    hidden = false
                )
                bool inputs:preload_textures = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Remix Flags"
                    displayName = "Preload Textures"
                    doc = """Use this option sparingly, this will consume video memory!  RTX Remix will load the textures associated with this material into GPU memory immediately without streaming at the highest quality possible.  Use this in situations where a material is fundamental for game play and yet is very transient.  For instance, we used this for Portal RTX on the Portals themselves.
This parameter is unused."""
                    hidden = false
                )
                float inputs:rotation_speed = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 10
                            float min = -10
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Rotation Speed"
                    doc = "The rotation speed of the spritesheet."
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet Columns"
                    doc = "Number of columns the spritesheet across all textures is divided into."
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 20 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet FPS"
                    doc = "Framerate in Frames Per Second to use for the spritesheet across all textures. Note that a value of 0 disables this functionality."
                    hidden = false
                )
                int inputs:sprite_sheet_rows = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet Rows"
                    doc = "Number of row the spritesheet across all textures is divided into."
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "mat_5312CF5DA5654648" (
            references = None
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_5312CF5DA5654648/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_5312CF5DA5654648/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_5312CF5DA5654648/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Portal.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Portal"
                float inputs:emissive_intensity = 0.25 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./assets/textures_effects/portal/Portal1024Blue_03.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:portal_index = 1 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                    }
                    displayName = "Portal Index"
                    doc = """Which portal this represents
This parameter is unused."""
                    hidden = false
                )
                bool inputs:preload_textures = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Remix Flags"
                    displayName = "Preload Textures"
                    doc = """Use this option sparingly, this will consume video memory!  RTX Remix will load the textures associated with this material into GPU memory immediately without streaming at the highest quality possible.  Use this in situations where a material is fundamental for game play and yet is very transient.  For instance, we used this for Portal RTX on the Portals themselves.
This parameter is unused."""
                    hidden = false
                )
                float inputs:rotation_speed = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 10
                            float min = -10
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Rotation Speed"
                    doc = "The rotation speed of the spritesheet."
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet Columns"
                    doc = "Number of columns the spritesheet across all textures is divided into."
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 20 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet FPS"
                    doc = "Framerate in Frames Per Second to use for the spritesheet across all textures. Note that a value of 0 disables this functionality."
                    hidden = false
                )
                int inputs:sprite_sheet_rows = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet Rows"
                    doc = "Number of row the spritesheet across all textures is divided into."
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "mat_909126F802D51452" (
            references = None
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_909126F802D51452/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_909126F802D51452/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_909126F802D51452/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Portal.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Portal"
                float inputs:emissive_intensity = 2 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./assets/textures_effects/portal/Portal1024Red.e.rtex.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:portal_index = 2 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 2
                            int min = 0
                        }
                    }
                    displayName = "Portal Index"
                    doc = """Which portal this represents
This parameter is unused."""
                    hidden = false
                )
                bool inputs:preload_textures = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Remix Flags"
                    displayName = "Preload Textures"
                    doc = """Use this option sparingly, this will consume video memory!  RTX Remix will load the textures associated with this material into GPU memory immediately without streaming at the highest quality possible.  Use this in situations where a material is fundamental for game play and yet is very transient.  For instance, we used this for Portal RTX on the Portals themselves.
This parameter is unused."""
                    hidden = false
                )
                float inputs:rotation_speed = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 10
                            float min = -10
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Rotation Speed"
                    doc = "The rotation speed of the spritesheet."
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet Columns"
                    doc = "Number of columns the spritesheet across all textures is divided into."
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 20 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet FPS"
                    doc = "Framerate in Frames Per Second to use for the spritesheet across all textures. Note that a value of 0 disables this functionality."
                    hidden = false
                )
                int inputs:sprite_sheet_rows = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet Rows"
                    doc = "Number of row the spritesheet across all textures is divided into."
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "mat_A441596040E78EEE" (
            references = None
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/mat_A441596040E78EEE/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/mat_A441596040E78EEE/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/mat_A441596040E78EEE/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @AperturePBR_Portal.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Portal"
                float inputs:emissive_intensity = 2 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./assets/textures_effects/portal/Portal1024Purple.e.rtex.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:portal_index = 3 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 1
                            int min = 0
                        }
                    }
                    displayName = "Portal Index"
                    doc = """Which portal this represents
This parameter is unused."""
                    hidden = false
                )
                bool inputs:preload_textures = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Remix Flags"
                    displayName = "Preload Textures"
                    doc = """Use this option sparingly, this will consume video memory!  RTX Remix will load the textures associated with this material into GPU memory immediately without streaming at the highest quality possible.  Use this in situations where a material is fundamental for game play and yet is very transient.  For instance, we used this for Portal RTX on the Portals themselves.
This parameter is unused."""
                    hidden = false
                )
                float inputs:rotation_speed = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 10
                            float min = -10
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Rotation Speed"
                    doc = "The rotation speed of the spritesheet."
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet Columns"
                    doc = "Number of columns the spritesheet across all textures is divided into."
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 20 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet FPS"
                    doc = "Framerate in Frames Per Second to use for the spritesheet across all textures. Note that a value of 0 disables this functionality."
                    hidden = false
                )
                int inputs:sprite_sheet_rows = 8 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Sprite Sheet"
                    displayName = "Sprite Sheet Rows"
                    doc = "Number of row the spritesheet across all textures is divided into."
                    hidden = false
                )
                token outputs:out
            }
        }
    }
}

